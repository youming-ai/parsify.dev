{
  "openapi": "3.0.3",
  "info": {
    "title": "Parsify API",
    "description": "Powerful API for JSON processing, code execution, file management, and more.\n\n## Features\n\n- **JSON Tools**: Format, validate, and convert JSON data\n- **Code Execution**: Execute JavaScript and Python code in a secure sandbox\n- **File Management**: Upload and process files with ease\n- **Job Processing**: Handle long-running operations asynchronously\n- **Rate Limiting**: Fair usage limits with tier-based pricing\n\n## Authentication\n\nThe API supports both anonymous and authenticated access. Some features require authentication and higher subscription tiers.\n\n## Rate Limiting\n\nRate limits vary by subscription tier:\n- **Anonymous**: 100 requests/hour\n- **Free**: 1,000 requests/hour  \n- **Pro**: 5,000 requests/hour\n- **Enterprise**: 50,000 requests/hour\n\n## Getting Started\n\n1. Check out the [API documentation](https://docs.parsify.dev/api)\n2. Create an account at [parsify.dev](https://parsify.dev)\n3. Get your API key from the dashboard\n4. Start making requests!\n\n## Support\n\n- [API Status](https://status.parsify.dev)\n- [Documentation](https://docs.parsify.dev)\n- [Support](mailto:support@parsify.dev)",
    "version": "1.0.0",
    "contact": {
      "name": "Parsify Support",
      "email": "support@parsify.dev",
      "url": "https://parsify.dev/support"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://api.parsify.dev",
      "description": "Production server"
    },
    {
      "url": "https://api-staging.parsify.dev",
      "description": "Staging server"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": ["Root"],
        "summary": "API Root",
        "description": "Get API information and available endpoints",
        "operationId": "getRoot",
        "responses": {
          "200": {
            "description": "API information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootResponse"
                },
                "example": {
                  "name": "Parsify API",
                  "version": "1.0.0",
                  "environment": "production",
                  "status": "operational",
                  "timestamp": "2023-12-01T12:00:00Z",
                  "endpoints": {
                    "health": "/health",
                    "metrics": "/metrics",
                    "api": "/api/v1",
                    "docs": "/api/v1/docs"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["Health"],
        "summary": "Health Check",
        "description": "Check API health status",
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "Health status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": ["Health"],
        "summary": "System Metrics",
        "description": "Get system performance metrics (admin only)",
        "operationId": "getMetrics",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "X-Admin-Key",
            "in": "header",
            "description": "Admin authentication key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "System metrics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/api/v1": {
      "get": {
        "tags": ["Root"],
        "summary": "API v1 Root",
        "description": "Get v1 API information",
        "operationId": "getAPIV1Root",
        "responses": {
          "200": {
            "description": "API v1 information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIV1RootResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tools": {
      "get": {
        "tags": ["Tools"],
        "summary": "List Available Tools",
        "description": "Get a list of all available tools and their configurations",
        "operationId": "listTools",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "Filter tools by category",
            "schema": {
              "type": "string",
              "enum": ["json", "code"]
            }
          },
          {
            "name": "enabled_only",
            "in": "query",
            "description": "Return only enabled tools",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of available tools",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolsListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tools/json/format": {
      "post": {
        "tags": ["JSON Tools"],
        "summary": "Format JSON",
        "description": "Format and beautify JSON data with custom indentation and optional key sorting",
        "operationId": "formatJSON",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JSONFormatRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON formatted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JSONFormatResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/api/v1/tools/json/validate": {
      "post": {
        "tags": ["JSON Tools"],
        "summary": "Validate JSON",
        "description": "Validate JSON syntax and optionally against a JSON schema",
        "operationId": "validateJSON",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JSONValidateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON validation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JSONValidateResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/api/v1/tools/json/convert": {
      "post": {
        "tags": ["JSON Tools"],
        "summary": "Convert JSON",
        "description": "Convert JSON to other formats (CSV, XML)",
        "operationId": "convertJSON",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JSONConvertRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON converted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JSONConvertResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/api/v1/tools/code/execute": {
      "post": {
        "tags": ["Code Tools"],
        "summary": "Execute Code",
        "description": "Execute code in a secure sandboxed environment",
        "operationId": "executeCode",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeExecuteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Code executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeExecuteResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/api/v1/tools/code/format": {
      "post": {
        "tags": ["Code Tools"],
        "summary": "Format Code",
        "description": "Format and beautify code in various languages",
        "operationId": "formatCode",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeFormatRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Code formatted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeFormatResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/api/v1/upload/sign": {
      "post": {
        "tags": ["File Upload"],
        "summary": "Get Upload URL",
        "description": "Get a presigned URL for file upload",
        "operationId": "signUpload",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadSignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upload URL generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadSignResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "413": {
            "description": "File too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/upload/status/{fileId}": {
      "get": {
        "tags": ["File Upload"],
        "summary": "Get Upload Status",
        "description": "Check the status of a file upload",
        "operationId": "getUploadStatus",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "description": "File ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Upload status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadStatusResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/v1/upload/confirm/{fileId}": {
      "post": {
        "tags": ["File Upload"],
        "summary": "Confirm Upload",
        "description": "Confirm that a file upload is complete",
        "operationId": "confirmUpload",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "description": "File ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "checksum": {
                    "type": "string",
                    "description": "SHA-256 checksum of the uploaded file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upload confirmed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadConfirmResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/v1/jobs": {
      "get": {
        "tags": ["Jobs"],
        "summary": "List Jobs",
        "description": "Get a list of jobs (admin/debug endpoint)",
        "operationId": "listJobs",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filter by job status",
            "schema": {
              "type": "string",
              "enum": ["pending", "running", "completed", "failed"]
            }
          },
          {
            "name": "tool_id",
            "in": "query",
            "description": "Filter by tool ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of jobs to return",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of jobs to skip",
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of jobs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Jobs"],
        "summary": "Create Job",
        "description": "Create a new job for asynchronous processing",
        "operationId": "createJob",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/api/v1/jobs/{jobId}": {
      "get": {
        "tags": ["Jobs"],
        "summary": "Get Job",
        "description": "Get job details and status",
        "operationId": "getJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "description": "Job ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": ["Jobs"],
        "summary": "Delete Job",
        "description": "Delete a job",
        "operationId": "deleteJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "description": "Job ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Job deleted successfully"
                    }
                  }
                }
              }
            },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/v1/users/profile": {
      "get": {
        "tags": ["Users"],
        "summary": "Get User Profile",
        "description": "Get current user profile information",
        "operationId": "getUserProfile",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/v1/auth/validate": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Validate Session",
        "description": "Validate current session and get user info",
        "operationId": "validateSession",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Session valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionValidateResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "RootResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Parsify API"
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          },
          "environment": {
            "type": "string",
            "example": "production"
          },
          "status": {
            "type": "string",
            "example": "operational"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "endpoints": {
            "type": "object",
            "properties": {
              "health": {
                "type": "string",
                "example": "/health"
              },
              "metrics": {
                "type": "string",
                "example": "/metrics"
              },
              "api": {
                "type": "string",
                "example": "/api/v1"
              },
              "docs": {
                "type": "string",
                "example": "/api/v1/docs"
              }
            }
          }
        }
      },
      "HealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["healthy", "degraded", "unhealthy"],
            "example": "healthy"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "environment": {
            "type": "string",
            "example": "production"
          },
          "version": {
            "type": "string",
            "example": "v1"
          },
          "services": {
            "type": "object",
            "properties": {
              "database": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "healthy"
                  },
                  "responseTime": {
                    "type": "number",
                    "example": 45
                  },
                  "uptime": {
                    "type": "number",
                    "example": 86400
                  }
                }
              },
              "cache": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "healthy"
                  },
                  "responseTime": {
                    "type": "number",
                    "example": 12
                  }
                }
              }
            }
          },
          "metrics": {
            "type": "object",
            "properties": {
              "uptime": {
                "type": "number",
                "example": 86400
              },
              "memory": {
                "type": "number",
                "example": 134217728
              },
              "requestCount": {
                "type": "number",
                "example": 1500
              }
            }
          },
          "requestId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": ["error", "message", "timestamp"],
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type identifier",
            "example": "Bad Request"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message",
            "example": "Invalid request format"
          },
          "code": {
            "type": "string",
            "description": "Machine-readable error code",
            "example": "INVALID_PARAMETER"
          },
          "requestId": {
            "type": "string",
            "format": "uuid",
            "description": "Request ID for debugging"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2023-12-01T12:00:00Z"
          }
        }
      },
      "JSONFormatRequest": {
        "type": "object",
        "required": ["json"],
        "properties": {
          "json": {
            "type": "string",
            "description": "JSON string to format",
            "example": "{\"name\":\"John\",\"age\":30}"
          },
          "indent": {
            "type": "integer",
            "minimum": 0,
            "maximum": 8,
            "default": 2,
            "description": "Number of spaces for indentation",
            "example": 2
          },
          "sort_keys": {
            "type": "boolean",
            "default": false,
            "description": "Whether to sort object keys alphabetically",
            "example": true
          }
        }
      },
      "JSONFormatResponse": {
        "type": "object",
        "properties": {
          "formatted": {
            "type": "string",
            "description": "Formatted JSON string",
            "example": "{\\n  \\\"age\\\": 30,\\n  \\\"name\\\": \\\"John\\\"\\n}"
          },
          "valid": {
            "type": "boolean",
            "description": "Whether input JSON was valid",
            "example": true
          },
          "size": {
            "type": "integer",
            "description": "Size of formatted output in bytes",
            "example": 42
          },
          "errors": {
            "type": "array",
            "description": "Array of validation errors (null if valid)",
            "items": {
              "type": "object",
              "properties": {
                "line": {
                  "type": "integer",
                  "example": 1
                },
                "column": {
                  "type": "integer",
                  "example": 15
                },
                "message": {
                  "type": "string",
                  "example": "Expected property name or '}' in JSON at position 15"
                }
              }
            },
            "nullable": true
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": "Bad Request",
              "message": "Missing required parameter: json",
              "code": "MISSING_PARAMETER",
              "requestId": "550e8400-e29b-41d4-a716-446655440000",
              "timestamp": "2023-12-01T12:00:00Z"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": "Authentication Required",
              "message": "Authorization header with Bearer token is required",
              "code": "MISSING_TOKEN",
              "requestId": "550e8400-e29b-41d4-a716-446655440000",
              "timestamp": "2023-12-01T12:00:00Z"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": "Insufficient Permissions",
              "message": "You do not have the required permissions to access this resource",
              "code": "INSUFFICIENT_PERMISSIONS",
              "requestId": "550e8400-e29b-41d4-a716-446655440000",
              "timestamp": "2023-12-01T12:00:00Z"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "error": "Not Found",
              "message": "The requested resource was not found",
              "requestId": "550e8400-e29b-41d4-a716-446655440000",
              "timestamp": "2023-12-01T12:00:00Z"
            }
          }
        }
      }
    },
    "tags": [
      {
        "name": "Root",
        "description": "API root and information endpoints"
      },
      {
        "name": "Health",
        "description": "Health check and monitoring endpoints"
      },
      {
        "name": "Tools",
        "description": "JSON and code processing tools"
      },
      {
        "name": "JSON Tools",
        "description": "JSON-specific processing tools"
      },
      {
        "name": "Code Tools",
        "description": "Code execution and formatting tools"
      },
      {
        "name": "File Upload",
        "description": "File upload and management"
      },
      {
        "name": "Jobs",
        "description": "Asynchronous job processing"
      },
      {
        "name": "Users",
        "description": "User management and profiles"
      },
      {
        "name": "Authentication",
        "description": "Authentication and session management"
      }
    ]
  }
}
