{
  "openapi": "3.0.0",
  "info": {
    "title": "File Processing API",
    "description": "Contract for file processing operations in JSON.md Reader",
    "version": "1.0.0"
  },
  "paths": {
    "/api/file/validate": {
      "post": {
        "summary": "Validate file before processing",
        "operationId": "validateFile",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileValidationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File validation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileValidationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/file/parse": {
      "post": {
        "summary": "Parse markdown file and extract JSON",
        "operationId": "parseFile",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileParseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File parsing result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileParseResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "FileValidationRequest": {
        "type": "object",
        "required": ["name", "size", "type"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Filename with extension",
            "pattern": "^.*\\.(md|txt)$"
          },
          "size": {
            "type": "integer",
            "description": "File size in bytes",
            "minimum": 0,
            "maximum": 1048576
          },
          "type": {
            "type": "string",
            "enum": ["markdown", "text"],
            "description": "File type classification"
          }
        }
      },
      "FileValidationResponse": {
        "type": "object",
        "required": ["isValid", "errors"],
        "properties": {
          "isValid": {
            "type": "boolean",
            "description": "Whether file passes validation"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors"
          }
        }
      },
      "FileParseRequest": {
        "type": "object",
        "required": ["content"],
        "properties": {
          "content": {
            "type": "string",
            "description": "Raw file content",
            "maxLength": 1048576
          },
          "options": {
            "type": "object",
            "properties": {
              "extractMode": {
                "type": "string",
                "enum": ["codeblock", "inline", "mixed"],
                "default": "mixed"
              },
              "maxDepth": {
                "type": "integer",
                "minimum": 1,
                "maximum": 20,
                "default": 10
              }
            }
          }
        }
      },
      "FileParseResponse": {
        "type": "object",
        "required": ["success", "documents"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether parsing was successful"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JsonDocument"
            },
            "description": "Extracted JSON documents"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "Parsing errors if any"
          }
        }
      },
      "JsonDocument": {
        "type": "object",
        "required": ["id", "rawJson", "isValid", "extractionMethod"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique document identifier"
          },
          "rawJson": {
            "type": "string",
            "description": "Raw JSON string"
          },
          "parsedData": {
            "description": "Parsed JSON data",
            "oneOf": [
              {"type": "object"},
              {"type": "array"},
              {"type": "string"},
              {"type": "number"},
              {"type": "boolean"},
              {"type": "null"}
            ]
          },
          "isValid": {
            "type": "boolean",
            "description": "Whether JSON is syntactically valid"
          },
          "extractionMethod": {
            "type": "string",
            "enum": ["codeblock", "inline", "mixed"],
            "description": "How JSON was extracted"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message if parsing failed"
          },
          "lineNumber": {
            "type": "integer",
            "description": "Line number where JSON was found"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "required": ["code", "message"],
        "properties": {
          "code": {
            "type": "string",
            "enum": ["INVALID_JSON_SYNTAX", "FILE_TOO_LARGE", "UNSUPPORTED_FORMAT", "EXTRACTION_FAILED"],
            "description": "Error code identifier"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "line": {
            "type": "integer",
            "description": "Line number where error occurred"
          },
          "column": {
            "type": "integer",
            "description": "Column position of error"
          },
          "severity": {
            "type": "string",
            "enum": ["error", "warning", "info"],
            "default": "error",
            "description": "Error severity level"
          }
        }
      }
    }
  }
}