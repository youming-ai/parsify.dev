name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run CI daily at 4 AM UTC
    - cron: '0 4 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run ESLint
      run: pnpm lint

    - name: Check Prettier formatting
      run: |
        pnpm format --check
        echo "Checking if code is properly formatted..."

    - name: Type check
      run: pnpm type-check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run unit tests with coverage
      run: pnpm test:coverage

    - name: Upload coverage reports to Codecov
      if: github.event_name != 'pull_request'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      # Add any required services here
      # redis:
      #   image: redis:6
      #   ports:
      #     - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build application
      run: pnpm build

    - name: Start application for testing
      run: |
        pnpm dev &
        echo "Waiting for application to start..."
        sleep 30

    - name: Wait for application to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run integration tests
      run: pnpm test:e2e

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests]

    strategy:
      matrix:
        app: [web, api]
        include:
          - app: web
            build_command: build
            artifact_name: web-build
            artifact_path: apps/web/.next
          - app: api
            build_command: build
            artifact_name: api-build
            artifact_path: apps/api/dist

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build ${{ matrix.app }}
      run: |
        cd apps/${{ matrix.app }}
        pnpm ${{ matrix.build_command }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_path }}
        retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run security audit
      run: pnpm audit --audit-level moderate

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Check for outdated dependencies
      run: |
        echo "## Outdated Dependencies" > dependency-report.md
        echo "" >> dependency-report.md
        pnpm outdated --json > outdated.json || true

        if [ -s outdated.json ]; then
          echo "### Found outdated dependencies:" >> dependency-report.md
          echo "" >> dependency-report.md
          node -e "
            const outdated = JSON.parse(require('fs').readFileSync('outdated.json', 'utf8'));
            Object.entries(outdated).forEach(([name, info]) => {
              console.log(\`- **\${name}**: \${info.current} → \${info.latest}\`);
            });
          " >> dependency-report.md
        else
          echo "✅ All dependencies are up to date" >> dependency-report.md
        fi

    - name: Upload dependency report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-report
        path: dependency-report.md
        retention-days: 7

  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, integration-tests, build-and-package, security-audit, dependency-check]
    if: always()

    steps:
    - name: CI Summary
      uses: actions/github-script@v6
      with:
        script: |
          const results = {
            'Lint and Format': '${{ needs.lint-and-format.result }}',
            'Unit Tests': '${{ needs.unit-tests.result }}',
            'Integration Tests': '${{ needs.integration-tests.result }}',
            'Build and Package': '${{ needs.build-and-package.result }}',
            'Security Audit': '${{ needs.security-audit.result }}',
            'Dependency Check': '${{ needs.dependency-check.result }}'
          };

          let summary = '## 🚀 CI Pipeline Summary\n\n';
          summary += '| Job | Status |\n';
          summary += '|-----|--------|\n';

          Object.entries(results).forEach(([job, result]) => {
            const icon = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⏳';
            summary += `| ${job} | ${icon} ${result} |\n`;
          });

          summary += `\n**Commit**: ${context.sha}\n`;
          summary += `**Branch**: ${context.ref}\n`;
          summary += `**Workflow**: ${context.workflow}\n`;

          if (github.event_name === 'pull_request') {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }

          console.log(summary);
